package de.uni_passau.fim.se2.sa.sign.interpretation;

import com.google.common.base.Preconditions;
import org.objectweb.asm.tree.analysis.Value;

/** An enum representing the possible abstract values of the sign analysis. */
public enum SignValue implements Value {
  // Important! This implementation is kind of fragile. Don't change the order of enum values!
  // Otherwise, code will break ðŸ¤¡:)
  BOTTOM("âŠ¥"), // 0
  MINUS("{â€“}"), // 1
  ZERO("{0}"), // 2
  ZERO_MINUS("{0,â€“}"), // 3 == ZERO | MINUS
  PLUS("{+}"), // 4 == 4
  PLUS_MINUS("{+,â€“}"), // 5 == PLUS | MINUS
  ZERO_PLUS("{0,+}"), // 6 == ZERO | PLUS
  TOP("âŠ¤"), // 7 == MINUS | ZERO | PLUS
  UNINITIALIZED_VALUE("âˆ…"); // 8

  private final String repr;

  SignValue(final String pRepr) {
    repr = pRepr;
  }

  @Override
  public int getSize() {
    return 1;
  }

  @Override
  public String toString() {
    return repr;
  }

  // Below method is generated by LLM.
  // Please refer to LLM/code_queries.txt
  public SignValue join(final SignValue pOther) {
    Preconditions.checkState(
        this != UNINITIALIZED_VALUE && pOther != UNINITIALIZED_VALUE,
        "Dummy shall not be used as a value.");

    // BOTTOM joined with anything is the other value
    if (this == BOTTOM) return pOther;
    if (pOther == BOTTOM) return this;

    // TOP joined with anything is TOP
    if (this == TOP || pOther == TOP) return TOP;

    // Perform bitwise OR on ordinal values
    int joinedOrdinal = this.ordinal() | pOther.ordinal();
    return SignValue.values()[joinedOrdinal];
  }

  public boolean isLessOrEqual(final SignValue pOther) {
    Preconditions.checkState(
        this != UNINITIALIZED_VALUE && pOther != UNINITIALIZED_VALUE,
        "Dummy shall not be used as a value.");
    return this.join(pOther) == pOther;
  }

  public static boolean isZero(final SignValue pValue) {
    return pValue == ZERO;
  }

  public static boolean isMaybeZero(final SignValue pValue) {
    return pValue == ZERO || pValue == ZERO_MINUS || pValue == ZERO_PLUS || pValue == TOP;
  }

  public static boolean isNegative(final SignValue pValue) {
    return pValue == SignValue.MINUS;
  }

  public static boolean isMaybeNegative(final SignValue pValue) {
    return pValue == SignValue.MINUS || pValue == ZERO_MINUS || pValue == PLUS_MINUS || pValue == TOP;
  }
}
